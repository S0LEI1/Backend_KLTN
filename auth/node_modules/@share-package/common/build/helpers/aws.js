"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsS3Helpers = void 0;
const fs_1 = __importDefault(require("fs"));
const aws_sdk_1 = require("aws-sdk");
const bad_request_error_1 = require("../errors/bad-request-error");
const BucketName = process.env.BUKET_NAME;
const region = process.env.REGION;
const accessKeyId = process.env.ACCESS_KEY_ID;
const secretAccessKey = process.env.SECRET_ACCESS_KEY;
const s3 = new aws_sdk_1.S3({
    region: region,
    credentials: {
        accessKeyId: accessKeyId,
        secretAccessKey: secretAccessKey,
    },
});
class AwsS3Helpers {
    uploadFile(file_1) {
        return __awaiter(this, arguments, void 0, function* (file, bucketName = BucketName) {
            const fileStream = fs_1.default.readFileSync(file.path);
            const uploadParams = {
                Bucket: bucketName,
                Body: fileStream,
                Key: `spa-${Date.now()}-${file.originalname}`,
            };
            const { mimetype } = file;
            if (mimetype === 'image/jpeg' || mimetype === 'image/png')
                uploadParams.ContentType = mimetype;
            try {
                const { Location } = yield s3.upload(uploadParams).promise();
                return Location;
            }
            catch (err) {
                console.log('err: ', err);
                throw new bad_request_error_1.BadRequestError('Upload file Aws S3 failed');
            }
        });
    }
    deleteFile(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, bucketName = BucketName) {
            const urlSplit = url.split('/');
            const key = urlSplit[urlSplit.length - 1];
            const params = {
                Bucket: bucketName,
                Key: key,
            };
            try {
                yield s3.deleteObject(params).promise();
            }
            catch (err) {
                throw new bad_request_error_1.BadRequestError('Delete file Aws S3 failed');
            }
        });
    }
}
exports.AwsS3Helpers = AwsS3Helpers;
